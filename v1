1. Pre-order Traversal:
```java
public void preOrderTraversal(Node node) {
    if (node == null) return;
    System.out.print(node.data + " "); // Process current node first
    preOrderTraversal(node.left);      // Then traverse left subtree 
    preOrderTraversal(node.right);     // Finally traverse right subtree
}
```
![alt text](mermaid-diagram-2024-11-02-102226.png)
2. In-order Traversal:  
```java
public void inOrderTraversal(Node node) {
    if (node == null) return;
    inOrderTraversal(node.left);       // Traverse left subtree first
    System.out.print(node.data + " "); // Then process current node
    inOrderTraversal(node.right);      // Finally traverse right subtree
}
```
![alt text](mermaid-diagram-2024-11-02-102158.png)

You can test these traversals using the 

Main

 class which creates a sample tree:

```
       1
      / \
     2   3
    / \
   4   5
```

Running the code will output:
- Pre-order: 1 2 4 5 3 (root → left → right)
- In-order: 4 2 5 1 3 (left → root → right)

The tree node structure is defined in 

Node.java

 with data and left/right child references.

 public class Main {
    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();

        // Construct the binary tree manually
        //        1
        //       / \
        //      2   3
        //     / \
        //    4   5
        tree.root = new Node(1);             // Root node
        tree.root.left = new Node(2);        // Left child of root
        tree.root.right = new Node(3);       // Right child of root
        tree.root.left.left = new Node(4);   // Left child of node 2
        tree.root.left.right = new Node(5);  // Right child of node 2

        // Perform pre-order traversal (Root -> Left -> Right)
        // Expected output: 1 2 4 5 3
        System.out.println("Pre-order Traversal:");
        tree.preOrderTraversal(tree.root); // Starts from the root node

        // Perform in-order traversal  (Left -> Root -> Right) 
        // Expected output: 4 2 5 1 3
        System.out.println("\nIn-order Traversal:");
        tree.inOrderTraversal(tree.root);
    }
}