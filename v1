1. Pre-order Traversal:
```java
public void preOrderTraversal(Node node) {
    if (node == null) return;
    System.out.print(node.data + " "); // Process current node first
    preOrderTraversal(node.left);      // Then traverse left subtree 
    preOrderTraversal(node.right);     // Finally traverse right subtree
}
```

2. In-order Traversal:  
```java
public void inOrderTraversal(Node node) {
    if (node == null) return;
    inOrderTraversal(node.left);       // Traverse left subtree first
    System.out.print(node.data + " "); // Then process current node
    inOrderTraversal(node.right);      // Finally traverse right subtree
}
```

You can test these traversals using the 

Main

 class which creates a sample tree:

```
       1
      / \
     2   3
    / \
   4   5
```

Running the code will output:
- Pre-order: 1 2 4 5 3 (root → left → right)
- In-order: 4 2 5 1 3 (left → root → right)

The tree node structure is defined in 

Node.java

 with data and left/right child references.